imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@ADWUserBundle/Resources/config/services.yml" }
    - { resource: ../../vendor/knplabs/doctrine-behaviors/config/orm-services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: ru

monolog:
    channels: [domain, api]
    handlers:
        api:
            type:  rotating_file
            path:  "%kernel.logs_dir%/api-%kernel.environment%.log"
            level: info
            channels: [api]

framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.root_dir%/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments: ~
    http_method_override: true
    assets:
        version: "%assets_version%"
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
        types:
            json: Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            SonataClassificationBundle: ~
            ApplicationSonataClassificationBundle: ~
            SonataMediaBundle: ~
            ApplicationSonataMediaBundle: ~


# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool:
        type: file
        path: '%kernel.root_dir%/logs/spooldir'


# Doctrine Migrations Configuration
doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

# Sonata Block Configuration
sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.admin.block.admin_list:
            contexts: [admin]

        sonata.admin.block.search_result:
            contexts:   [admin]

# Sonata Media Configuration
sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  "%kernel.root_dir%/../web/uploads/media"
            create:     false

# Nelmio CORS Configuration
nelmio_cors:
    defaults:
        allow_credentials: true
        allow_origin: ['*']
        allow_headers: ['Content-Type', 'X-Session']
        allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'PATCH']
        expose_headers: []
        max_age: 0
        hosts: []
    paths:
        '^/':
            allow_credentials: true
            allow_origin: ['*']
            allow_headers: ['Content-Type', 'X-Session']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'PATCH']
            max_age: 3600

adw_config:
    rules:
        - {rule: '+', firewalls: ['main']}
        # "+" на какие firewall распростронять в виде массива
        - {rule: '-', firewalls: ['admin',"dev"]}
        # "-" на какие не распространять
#Config instruction  https://github.com/hwi/HWIOAuthBundle/blob/master/Resources/doc/resource_owners/facebook.md
#hwi_oauth:
#    firewall_names: [main]
#    resource_owners:
#        facebook:
#            type: facebook
#            options:
#                display: popup
#            client_id: 111 # <- change this to yours
#            client_secret: 222 # <- change this to yours
#            scope:         "email"
#            infos_url:     "https://graph.facebook.com/me?fields=id,name,email,picture.type(square)"
#            paths:
#                email:     email
#                profilepicture: picture.data.url

knp_paginator:
    page_range: 5                       # number of links showed in the pagination menu (e.g: you have 10 pages, a page_range of 3, on the 5th page you'll see links to page 4, 5, 6)
    default_options:
        page_name: page                 # page query parameter name
        sort_field_name: sort           # sort field query parameter name
        sort_direction_name: direction  # sort direction query parameter name
        distinct: true                  # ensure distinct results, useful when ORM queries are using GROUP BY statements
        filter_field_name: filterField  # filter field query parameter name
        filter_value_name: filterValue  # filter value query paameter name
    template:
        pagination: '@KnpPaginator/Pagination/sliding.html.twig'     # sliding pagination controls template
        sortable: '@KnpPaginator/Pagination/sortable_link.html.twig' # sort link template
        filtration: '@KnpPaginator/Pagination/filtration.html.twig'  # filters template

adwseo:
    redirects:
      enabled: false
      not_found_only: false

# Fos User Configuration
fos_user:
   db_driver: orm
   firewall_name: main
   user_class: AppBundle\Entity\User
   from_email:
        address: you@example.com
        sender_name: You
#    group:
#        group_class:   Application\Sonata\UserBundle\Entity\Group
#        group_manager: sonata.user.orm.group_manager # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)
#    service:
#        user_manager: sonata.user.orm.user_manager  # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

#ADW Common Configuration
adw_common:
    response_headers:
        X-Frame-Options: deny
        X-Content-Type-Options: nosniff